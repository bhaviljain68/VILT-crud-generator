<?php

namespace {{ namespace }};
use App\Models\{{ model }};
use App\Http\Resources\{{ model }}Resource;       
use App\Http\Resources\{{ model }}Collection; 
use Inertia\Inertia;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Log;
{{ useFormRequestsImports }}
{{ exportImport }}

class {{ model }}Controller extends Controller
{
    {{ exportTraitBlock }}

    public function index()
    {
        $query = {{ model }}::query();
        // You can add filtering or sorting logic here
        ${{ modelPluralVar }} = $query->latest()->paginate(10);

        return Inertia::render('{{ modelPlural }}/Index', [
            '{{ modelPluralVar }}' => new {{ model }}Collection(${{ modelPluralVar }})
        ]);
    }

    public function create()
    {
        return Inertia::render('{{ modelPlural }}/Create');
    }

    public function store({{ storeRequestParam }})
    {
        try {
            $validatedData = {{ validateStoreData }};
            ${{ modelVar }} = {{ model }}::create($validatedData);

            return redirect()
                ->route('{{ route }}.index')
                ->with('success', '{{ model }} created successfully.');
        } catch (\Exception $e) {
            Log::error("Failed to create {{ model }}: {$e->getMessage()}", ['exception' => $e]);

            return redirect()
                ->route('{{ route }}.create')
                ->with('error', 'Failed to create {{ model }}. Please try again.');
        }
    }

    public function show({{ model }} ${{ modelVar }})
    {
        return Inertia::render('{{ modelPlural }}/Show', [
            '{{ modelVar }}' => new {{ model }}Resource(${{ modelVar }})
        ]);
    }

    public function edit({{ model }} ${{ modelVar }})
    {
        return Inertia::render('{{ modelPlural }}/Edit', [
            '{{ modelVar }}' => new {{ model }}Resource(${{ modelVar }})
        ]);
    }

    public function update({{ updateRequestParam }}, {{ model }} ${{ modelVar }})
    {
        try {
            $validatedData = {{ validateUpdateData }};
            ${{ modelVar }}->update($validatedData);

            return redirect()
                ->route('{{ route }}.index')
                ->with('success', '{{ model }} updated successfully.');
        } catch (\Exception $e) {
            Log::error("Failed to update {{ model }} [ID: {{modelVar}}]: {$e->getMessage()}", ['exception' => $e]);

            return redirect()
                ->route('{{ route }}.edit', ${{ modelVar }})
                ->with('error', 'Failed to update {{ model }}. Please try again.');
        }
    }

    public function destroy({{ model }} ${{ modelVar }})
    {
        try {
            ${{ modelVar }}->delete();

            return redirect()
                ->route('{{ route }}.index')
                ->with('success', '{{ model }} deleted successfully.');
        } catch (\Exception $e) {
            Log::error("Failed to delete {{ model }} [ID: {{modelVar}}]: {$e->getMessage()}", ['exception' => $e]);

            return redirect()
                ->route('{{ route }}.index')
                ->with('error', 'Failed to delete {{ model }}. Please try again.');
        }
    }
}
