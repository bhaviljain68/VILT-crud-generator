<?php

namespace {{ namespace }};

use App\Models\{{ model }};
use App\Http\Resources\{{ model }}Resource;       
use App\Http\Resources\{{ model }}Collection; 
use Inertia\Inertia;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
{{ useFormRequestsImports }}                       
{{ exportImport }}
use Illuminate\Support\Facades\Log;

class {{ model }}Controller extends Controller
{
    {{ exportTraitBlock }}  

    public function index()
    {
        $query = {{ modelName }}::query();
        // You can add filtering or sorting logic here
        ${{ modelPluralVar }} = $query->latest()->paginate(10);

        return Inertia::render('{{ modelPlural }}/Index', [
            '{{ modelPluralVar }}' => new {{ model }}Collection(${{ modelPluralVar }})
        ]);
    }

    public function create()
    {
        return Inertia::render('{{ modelPlural }}/Create');
    }

    public function store({{ storeRequestParam }})
    {
        try {
            $validatedData = {{ validateStoreData }};
            ${{ modelVar }} = {{ modelName }}::create($validatedData);

            return redirect()
                ->route('{{ routeName }}.index')
                ->with('success', '{{ modelName }} created successfully.');
        } catch (\Exception $e) {
            Log::error("Failed to create {{ modelName }}: {$e->getMessage()}", ['exception' => $e]);

            return redirect()
                ->route('{{ routeName }}.create')
                ->with('error', 'Failed to create {{ modelName }}. Please try again.');
        }
    }

    public function show({{ modelName }} ${{ modelVar }})
    {
        return Inertia::render('{{ modelPlural }}/Show', [
            '{{ modelVar }}' => new {{ model }}Resource(${{ modelVar }})
        ]);
    }

    public function edit({{ modelName }} ${{ modelVar }})
    {
        return Inertia::render('{{ modelPlural }}/Edit', [
            '{{ modelVar }}' => new {{ model }}Resource(${{ modelVar }})
        ]);
    }

     public function update({{ updateRequestParam }}, {{ modelName }} ${{ modelVar }})
    {
        try {
            $validatedData = {{ validateUpdateData }};
            ${{ modelVar }}->update($validatedData);

            return redirect()
                ->route('{{ routeName }}.index')
                ->with('success', '{{ modelName }} updated successfully.');
        } catch (\Exception $e) {
            Log::error("Failed to update {{ modelName }} [ID: {{modelVar}}]: {$e->getMessage()}", ['exception' => $e]);

            return redirect()
                ->route('{{ routeName }}.edit', ${{ modelVar }})
                ->with('error', 'Failed to update {{ modelName }}. Please try again.');
        }
    }

    public function destroy({{ modelName }} ${{ modelVar }})
    {
        try {
            ${{ modelVar }}->delete();

            return redirect()
                ->route('{{ routeName }}.index')
                ->with('success', '{{ modelName }} deleted successfully.');
        } catch (\Exception $e) {
            Log::error("Failed to delete {{ modelName }} [ID: {{modelVar}}]: {$e->getMessage()}", ['exception' => $e]);

            return redirect()
                ->route('{{ routeName }}.index')
                ->with('error', 'Failed to delete {{ modelName }}. Please try again.');
        }
    }
}
